*Setting*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*
Resource	../Resource/CM_Resource.tsv
Resource	../Resource/SSH_Resource.tsv
Suite Setup	Run Keywords	Fetch_CM_Token	Add_Groups	Add_Devices
Suite Teardown	Cleaning environments
Force Tags	rw

*Variable*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*
@{int_validation}	x	中文
${data}=	{"entries":[{"int_val":365,"name":"elog","enabled":true,"due_time":"18:00", "int_unit":"days","id":1},{"int_val":54,"name":"jobevent","enabled":true,"due_time":"18:00", "int_unit":"weeks","id":2}, {"int_val":12,"name":"backup","enabled":true,"due_time":"18:00","int_unit":"months","id":3}]}

###	root@fortiwebcm:/var/log/fwbcm# pwd
###	/var/log/fwbcm
###	root@fortiwebcm:/var/log/fwbcm# tail -F celery-beat.log
###	root@fortiwebcm:/var/log/fwbcm# grep clean_expire_rec_files *

*Test Case*	*Action*	 *Argument*	*Argument*	*Argument*	*Argument*	*Argument*	*Argument*
## Failed. When push config, it does not recognized the Administrative Doma has been enabled
## No config need to push!
001  Verify the ADOM enabled setting can be pushed
	SSH_Write	config global	config system global	set adom-admin enable	end
	Push_Config

## Failed with No config need to push!
002  Verify the new added ADOM can be pushed
	SSH_Write	config vdom	edit ADOM_01	end
	Push_Config	

## Failed with {"detail":"Push successfully."}
## Configuration push for device (d1) succeeded
003  Verify the ADOM disabled setting can be pushed
	SSH_Write	config global	config system global	set adom-admin disable	end
	Push_Config

004  Verify the ADOM Enable and new added ADOM can be can be pushed together
	SSH_Write	config system global	set adom-admin enable	end
	Sleep	3
	SSH_Write	config vdom	edit ADOM_01	end
	Push_Config

005  Verify the new ADOM server policy can be pushed

## unsupported
006  Verify root VDOM Virtual still can be pushed
	Push_Config

007  Verify the ADOM Names can only contain A-Z, a-z, 0-9, _

008  Verify tge ADOM Names can only support 11 characters

009  Verify the root VDOM config can still be pushed

010  Verify wizard is supported

011  Verify job is supported

301  Verify the empty data will not cause any isue
	POST	/api/v1/system/maintenance/clean/	{"entries":[{}, {}, {}]}
	Response Code Should Be	200
	Last Elog Sholud Contain	Setting Clean Entries succeeded
	GET	/api/v1/system/maintenance/clean/
	Response Code Should Be	200
	${get_data}	Set Variable	${resp.json()}
	Log to Console	${\n}--${get_data}
	Should Be True	0	Get length	${get_data}

*Keyword*	*Action*	*Argument*	*Argument*	*Argument*	*Argument*	*Argument*	*Argument*
Add_Groups
	POST	/api/v1/devices/group/	{"name":"${Group_Name}", "description":"This is ${Group_Name}", "variables":{"VIP_1": "1.1.1.1", "DMZ": "Port1"}}
	${gid_1}	Search_Filter_ID	/api/v1/devices/group/	search=${Group_Name}&name__exact=${Group_Name}
	Set Suite Variable	${gid_1}

Add_Devices
#	POST	/api/v1/devices/device/	{"name":"${Device_Name}", "username":"${Device_Username}", "password":"${Device_Password}", "ipaddress":"${Device_IPaddress}", "group":"${gid_1}"}
#	POST	/api/v1/devices/device/	{"name":"${Device_Name2}", "username":"${FWB2_Username}", "password":"${FWB2_Password}", "ipaddress":"${FWB2_IP}", "group":"${gid_1}"}
	POST	/api/v1/devices/device/	{"name":"${Device_Name}", "username":"${Device_Username}", "password":"${Device_Password}", "ipaddress":"${Device_IPaddress}", "group":"${gid_1}", "variables":${device_Variables}}
	POST	/api/v1/devices/device/	{"name":"${Device_Name2}", "username":"${Device_Username2}", "password":"${Device_Password2}", "ipaddress":"${Device_IPaddress2}", "group":"${gid_1}", "variables":${device_Variables2}}
	${did_1}	Search_Filter_ID	/api/v1/devices/device/	search=${Device_Name}&name__exact=${Device_Name}
	Set Suite Variable	${did_1}

Disable_ADOM
	${IP_Backup}	Set Variable	${Device_IPaddress}
	SSH_Write	config global	config system global	set adom-admin disable	end
	Set Global Variable	${Device_IPaddress}	${Device_IPaddress2}
	SSH_Write	config global	config system global	set adom-admin disable	end
	Set Global Variable	${Device_IPaddress}	${IP_Backup}

Push_Config
	PUT	/api/v1/config/config-setting/	{"group":${gid_1},"system":1,"user":0,"server_policy":0,"waf":1,"log":0}
	Response Code Should Be	200
	Sleep	1
	POST	/api/v1/config/sync-config/	{"device":${did_1}}
	Response Code Should Be	200
	Sleep	70
	POST	/api/v1/config/group-config/	{"group":${gid_1}}
	Response Code Should Be	200
	Sleep	20
#	POST	/api/v1/config/config-precheck/
#	Response Code Should Be	200
#	Sleep	20
	POST	/api/v1/config/config-check/	{"group":${gid_1}}
	Response Code Should Be	200
	Sleep	60
	POST	/api/v1/config/push-config/	{"group":${gid_1}}
	Response Code Should Be	200
	Response Should Contain Sub Dictionary	detail=Push successfully.
	Sleep	30

# 主题 从 配置同步 对于 ADOM 的支持 变更为 Config Mgmt/Job-Push Config should support the FWB which the ADOM is enabled.
# 1. can push the vdom status to the remote, no matter the cm vdom status is same or different from the remote.
# 2. can push the config to the remote no matter the cm vdom config is same or different from the remote, including the vdom status.
# 3. support checking the vs and service paras are conflicted, when pushing the vdom config.
# 4. support the wizard function when the remote or local is enabled vdom.
# 5. support the job function when pushing the command with vdom's config.

# Notice:
# If you are pushing the config, you must specify the command to tail the remote device whether is it a vdom config, or it will be pushed as non-vdom config.

# 6. support the machine learning when the local or remote device is enabled vdom.

Cleaning environments
#	POST	/api/v1/system/maintenance/clean/	{"entries":${back_data}}
#	POST	/api/v1/system/maintenance/clean/	${data}
	Sleep	1
