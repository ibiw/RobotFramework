*Setting*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*
Resource	../Resource/CM_Resource.tsv
Resource	../Resource/SSH_Resource.tsv
Suite Setup	Run Keywords	Fetch_CM_Token	Add_Groups	Add_Devices	Get_Current_Route
Suite Teardown	Cleaning environments
Force Tags	rw

*Variable*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*	*Value*
#&{request_data}	name=${Group_Name}	description=This is ${Group_Name}	variables={VIP_1: 1.1.1.1, DMZ: Port1}
## only ip address like 1.1.1.1 will cause 500 error
@{ip_netmask}	1.1.1./32	/	1.1.1.1/-1	1.1.1.1/33	1.1.1.1/a	-1.1.1.1/24	1,1,1,1/24	1.1.1.256/24	1.256.1.1/24	1.1.1.a/24
@{ip_address}	10.2.1.256	10.2.1.-1	10.2.1.x	10,2.1.1	10.2.1
#${ip_empty}	
${x_1024}	
&{interface_data}	name=port1	ipaddress_mask=${CM_IP}/16	description=This is port1
&{interface_data_mod}	name=port1	ipaddress_mask=${CM_IP}/16	description=This is port1 mod
&{interface_data_mod_1024}	name=port1	ipaddress_mask=${CM_IP}/16	description=This is port1 mod
&{interface_data_mac}	name=port1	ipaddress_mask=${CM_IP}/16	mac=00:0c:29:cf:67:d9
&{interface_data_empty_ip}	name=port1	ipaddress_mask=	mac=00:0c:29:cf:67:d9

# #&{interface_data_port2}	name=port2	ipaddress_mask=192.168.2.1/24	description=This is port2
# #&{interface_data_port3}	name=port3	ipaddress_mask=192.168.3.1/24	description=This is port3
# #&{interface_data_port4}	name=port4	ipaddress_mask=192.168.4.1/24	description=This is port4
# #&{interface_data_port5}	name=port5	ipaddress_mask=192.168.5.1/24	description=This is port5
# #&{interface_data_portx}	name=portx	ipaddress_mask=192.168.5.1/24	description=This is portx
# &{interface_data_port2_exist_ip}	name=port2	ipaddress_mask=${CM_IP}/16	description=This is port2 with same ip as port1

@{route_id}	
@{route_id_new}	

*Test Case*	*Action*	 *Argument*	*Argument*	*Argument*	*Argument*	*Argument*	*Argument*
001  Verify network interfaces can be viewed by admin
	GET	/api/v1/system/network/interface/
	Response Code Should Be	200
#	${result}	Create Dictionary	name=port1	ipaddress_mask=${CM_IP}
#	${result}	Set Variable	{"name":"port1", "ipaddress_mask":"${CM_IP}/16"}
#	Results Should Contain Sub Dictionary	${resp.json()}	${result}

002  Verify network interfaces can be edited by admin
	${interface_data}	Set Variable	${interface_data_mod}
	PUT	/api/v1/system/network/interface/	${interface_data}
	Response Code Should Be	200
	Response Should Contain String	Editing network interface (${interface_data["name"]}) succeeded
	Last Elog Sholud Contain	Editing network interface (${interface_data["name"]}) succeeded

003  Verify network interfaces cannot be edited with empty address
	${interface_data}	Set Variable	${interface_data_empty_ip}
	PUT	/api/v1/system/network/interface/	${interface_data}
	Response Code Should Be	400
	Response Should Contain String	Editing netwrok interface failed, IP/Mask missing
	Last Elog Sholud Contain	Editing netwrok interface failed, IP/Mask missing

004  Verify there is interface IPv4/Netmask input validiation
	:FOR	${item}	in	@{ip_netmask}
		PUT	/api/v1/system/network/interface/	{"name":"port1", "ipaddress_mask":"${item}"}
		Response Code Should Be	400
		Response Should Contain String	Editing network interface (port1) failed, IP/Mask format invalid
		Last Elog Sholud Contain	Editing network interface (port1) failed, IP/Mask format invalid

## no limit currently, use 1024
005  Verify the interface Description can be added x characters
	PUT	/api/v1/system/network/interface/	${interface_data_mod_1024}
	Response Code Should Be	200
	Response Should Contain String	Editing network interface (port1) succeeded
	Last Elog Sholud Contain	Editing network interface (port1) succeeded

006  Verify network interfaces mac address cannot be edited by admin
	GET	/api/v1/system/network/interface/
	Response Code Should Be	200
	${mac_old}	Set VAriable	${resp.json()[0]["mac"]}
	${interface_data}	Set Variable	${interface_data_mac}
	PUT	/api/v1/system/network/interface/	${interface_data}
	Response Code Should Be	200
	GET	/api/v1/system/network/interface/
	Response Code Should Be	200
	${mac_new}	Set Variable	${resp.json()[0]["mac"]}
	Should Match	${mac_new}	${mac_old}

007  Verify the already exist route can not be added by admin
	POST	/api/v1/system/network/route/	{"destination_ip_mask":"1.1.21.0/24","gateway":"10.200.2.2","name":"port1"}
	Response Code Should Be	200
	POST	/api/v1/system/network/route/	{"destination_ip_mask":"1.1.21.0/24","gateway":"10.200.2.2","name":"port1"}
	Response Code Should Be	400
	Response Should Contain String	Adding route failed, Destination IP/Mask already existing
	Response Should Contain String	Adding route failed, Destination IP/Mask already existing

008  Verify there is IPv4/Netmask input validiation when add static route
	:FOR	${item}	in	@{ip_netmask}
		POST	/api/v1/system/network/route/	{"destination_ip_mask":"${item}","gateway":"10.200.2.2","name":"port1"}
		Response Code Should Be	400
		Response Should Contain String	Adding route failed, Destination IP/Mask invalid
		Last Elog Sholud Contain	Adding route failed, Destination IP/Mask invalid

010  Verify there is gateway input validiation when add static route
	:FOR	${item}	in	@{ip_address}
		POST	/api/v1/system/network/route/	{"destination_ip_mask":"1.1.3.0/24","gateway":"${item}","name":"port1"}
		Response Code Should Be	400
		Response Should Contain String	Adding route failed, Gateway invalid
		Last Elog Sholud Contain	Adding route failed, Gateway invalid

011  Verify there is gateway input validiation when add empty gateway
	POST	/api/v1/system/network/route/	{"destination_ip_mask":"1.1.4.0/24","gateway":"","name":"port1"}
	Response Code Should Be	400
	Response Should Contain String	Adding route failed, gateway missing
	Response Should Contain String	Adding route failed, gateway missing

012  Verify the host route can be added by admim
	Log to Console	${\n}--It does not support host route, such as 9.9.9.9/32
	POST	/api/v1/system/network/route/	{"destination_ip_mask":"9.9.9.9/32","gateway":"10.200.2.2","name":"port1"}
#	Log to Console	${\n}--${resp.json()["detail"]}
	Response Code Should Be	200
	Last Elog Sholud Contain	Adding network route succeeded
	
## 10.2.1 is valid in API but invalid in GUI
013  Verify there is IP address input validiation when add primary DNS Serer
	Log to Console	${\n}--IP address 10.2.1 can be added with API
	:FOR	${item}	in	@{ip_address}
		PUT	/api/v1/system/network/dns/	{"serv1":"${item}","serv2":"8.8.4.4"}
		Response Code Should Be	400
		Response Should Contain String	Editing DNS failed, Primary DNS server IP invalid
		Last Elog Sholud Contain	Editing DNS failed, Primary DNS server IP invalid
	
014  Verify there is IP address input validiation when add secondary DNS Serer
	Log to Console	${\n}--IP address 10.2.1 can be added with API
	:FOR	${item}	in	@{ip_address}
		PUT	/api/v1/system/network/dns/	{"serv1":"8.8.8.8","serv2":"${item}"}
		Response Code Should Be	400
		Response Should Contain String	Editing DNS failed, Secondary DNS server IP invalid
		Last Elog Sholud Contain	Editing DNS failed, Secondary DNS server IP invalid

# 101  Verify network port2 interfaces can be edited by admin
# 	${interface_data}	Set Variable	${interface_data_port2}
# 	PUT	/api/v1/system/network/interface/	${interface_data}
# 	Response Code Should Be	200
# 	Response Should Contain String	Editing network interface (${interface_data["name"]}) succeeded
# 	Last Elog Sholud Contain	Editing network interface (${interface_data["name"]}) succeeded

# 102  Verify network port3 interfaces can be edited by admin
# 	${interface_data}	Set Variable	${interface_data_port3}
# 	PUT	/api/v1/system/network/interface/	${interface_data}
# 	Response Code Should Be	200
# 	Response Should Contain String	Editing network interface (${interface_data["name"]}) succeeded
# 	Last Elog Sholud Contain	Editing network interface (${interface_data["name"]}) succeeded

# 103  Verify network port4 interfaces can be edited by admin
# 	${interface_data}	Set Variable	${interface_data_port4}
# 	PUT	/api/v1/system/network/interface/	${interface_data}
# 	Response Code Should Be	200
# 	Response Should Contain String	Editing network interface (${interface_data["name"]}) succeeded
# 	Last Elog Sholud Contain	Editing network interface (${interface_data["name"]}) succeeded

# 104  Verify it cannot set an exist IP address when edit network interfaces
# 	${interface_data}	Set Variable	${interface_data_port2_exist_ip}
# 	PUT	/api/v1/system/network/interface/	${interface_data}
# 	Response Code Should Be	400

# 105  Verify network port5 interfaces cannot be edited by admin
# 	${interface_data}	Set Variable	${interface_data_port5}
# 	PUT	/api/v1/system/network/interface/	${interface_data}
# 	Response Code Should Be	400

*Keyword*	*Action*	*Argument*	*Argument*	*Argument*	*Argument*	*Argument*	*Argument*
Add_Groups
	POST	/api/v1/devices/group/	{"name":"${Group_Name}", "description":"This is ${Group_Name}", "variables":{"VIP_1": "1.1.1.1", "DMZ": "Port1"}}
#	POST	/api/v1/devices/group/	{"name":"${Group_Name}", "description":"This is ${Group_Name}", "variables":${device_Variables}}
	${gid_1}	Search_Filter_ID	/api/v1/devices/group/	search=${Group_Name}&name__exact=${Group_Name}
	Set Suite Variable	${gid_1}

Add_Devices
#	POST	/api/v1/devices/device/	{"name":"${Device_Name}", "username":"${FWB1_Username}", "password":"${FWB1_Password}", "ipaddress":"${FWB1_IP}", "group":"${gid_1}"}
	POST	/api/v1/devices/device/	{"name":"${Device_Name}", "username":"${Device_Username}", "password":"${Device_Password}", "ipaddress":"${Device_IPaddress}", "group":"${gid_1}", "variables":${device_Variables}}
	${did_1}	Search_Filter_ID	/api/v1/devices/device/	search=${Device_Name}&name__exact=${Device_Name}
	Set Suite Variable	${did_1}

Get_Current_Route
	GET	/api/v1/system/network/route/
	:FOR	${item}	in	@{resp.json()["results"]}
		Append To List	${route_id}	${Item["id"]}
	${len_old}	Get Length	${route_id}
	Set Suite Variable	${len_old}

Clean_Added_Route
	GET	/api/v1/system/network/route/
	:FOR	${item}	in	@{resp.json()["results"]}
		Append To List	${route_id_new}	${Item["id"]}
	${len_new}	Get Length	${route_id_new}
	:FOR	${item}	In Range	${len_old}	${len_new}
		DELETE	/api/v1/system/network/route/${route_id_new[${item}]}

Cleaning environments
	Delete_On_Teardown	/api/v1/devices/device/	${Device_Name}	name
	Delete_On_Teardown	/api/v1/devices/group/	${Group_Name}	name
	Clean_Added_Route

